# Define the stages for the pipeline
stages:
  - docker_build
  - pre_build
  - build

# Assume the Dockerfile version is passed as a CI/CD variable or hardcoded
variables:
  DOCKERFILE_VERSION: "v1.1"

# Job to build your custom Docker image
build_image:
  stage: docker_build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  only:
    - branches
    - merge_requests
    - web
  script:
    - echo "Building Docker image from Dockerfile..."
    # Login to GitLab Container Registry
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    # Build the Docker image and tag it with the commit SHA and 'latest'
    - docker build -f "Dockerfile_${DOCKERFILE_VERSION}" -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA" -t "$CI_REGISTRY_IMAGE:latest" .
    # Push the built image to the GitLab Container Registry
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - echo "Docker image built and pushed successfully!"
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .docker/cache

# 2. Run the pre-build Python script using the built image
pre_build_job:
  stage: pre_build
  image: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  needs:
    - build_image
  script:
    - python tools/Add_check_all.py src
  only:
    - branches
    - merge_requests
    - web

# Build and test job using the custom Docker image
build_and_test:
  stage: build
  image: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  script:
    # Navigate to the project directory
    - cd "$CI_PROJECT_DIR"
    # Clean previous build artifacts
    - echo "Running make clean..."
    - make clean
    # Compile all source files
    - echo "Running make all..."
    - make all
    # Execute the compiled trading system and redirect output to result.txt
    - echo "Running trading_system and saving output to result.txt..."
    - ./output/trading_system > result.txt
    # Display the content of result.txt for immediate feedback
    - echo "=== Content of result.txt ==="
    - cat result.txt
    - echo "========================="
  # Define artifacts to save
  artifacts:
    paths:
      - result.txt
      - parameter_check.log
      - error.log
    expire_in: 1 week
  # This job depends on the 'build_image' job
  needs:
    - pre_build_job
  only:
    - branches
    - merge_requests
    - web