# Define the stages for the pipeline
stages:
  - docker_build
  - build

# Assume the Dockerfile version is passed as a CI/CD variable or hardcoded
variables:
  DOCKERFILE_VERSION: "v1.1"
  GIT_SUBMODULE_STRATEGY: recursive
 # GIT_SUBMODULE_UPDATE_FLAGS: --remote
  GIT_SUBMODULE_DEPTH: 1
  GIT_DEPTH: 0

default:
  hooks:
    pre_get_sources_script:
      - git config --global "credential.${CI_SERVER_PROTOCOL}://${CI_SERVER_FQDN}.username" gitlab-ci-token
      - git config --global "credential.${CI_SERVER_PROTOCOL}://${CI_SERVER_FQDN}.helper" '!f(){ if [ "$1" = "get" ] ; then echo "password=${CI_JOB_TOKEN}" ; fi ; } ; f'
      - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf "https://gitlab.com/" 

# Job to build your custom Docker image
build_image:
  stage: docker_build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  only:
    - branches
    - merge_requests
    - web
  script:
    - echo "Building Docker image from Dockerfile..."
    # Login to GitLab Container Registry
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    # Build the Docker image and tag it with the commit SHA and 'latest'
    - docker build -f "Dockerfile_${DOCKERFILE_VERSION}" -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA" -t "$CI_REGISTRY_IMAGE:latest" .
    # Push the built image to the GitLab Container Registry
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - echo "Docker image built and pushed successfully!"
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - .docker/cache

# Build and test job using the custom Docker image
build_and_test:
  stage: build
  image: "$CI_REGISTRY_IMAGE:latest"
  script:
    # Navigate to the project directory
    - cd "$CI_PROJECT_DIR"
    - pwd
    - ls -la util/
    - ls -la tools/
    # Execute the compiled trading system and redirect output to result.txt
    - echo "Running trading_system and saving output to result.txt..."
    - python RunTradeSystem.py
    - ./output/trading_system > result.txt
    # Display the content of result.txt for immediate feedback
    - echo "=== Content of result.txt ==="
    - cat result.txt
    - echo "========================="
  # Define artifacts to save
  artifacts:
    paths:
      - result.txt
      - parameter_check.log
      - error.log
    expire_in: 1 week
  # This job depends on the 'build_image' job
  needs:
    - build_image
  only:
    - branches
    - merge_requests
    - web